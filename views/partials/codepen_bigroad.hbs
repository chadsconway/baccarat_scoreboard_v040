<style>
  body {
	font-family: "Source Sans Pro", sans-serif;
	display: flex;
	height: 100vh;
	overflow: hidden;
	flex-direction: column;
	justify-content: center;
	align-items: center;
}

.big-road-svg {
	width: 90vw;
	height: auto;
  overflow-x:scroll;
}


.big-road-title {
	font-family: sans-serif;
	font-size: 40px;
}
.big-road-wrapper{
	width: 90vw;
	height: auto;
}

</style>




<div class="big-road-wrapper">
	<div class="big-road-title">Big Road</div>
	<svg class="big-road-svg" xmlns="http://www.w3.org/2000/svg">
		<rect class="big-road-back-rect" width="100%" height="100%" fill="#000" />
	</svg>
</div>















<script>
  document.addEventListener("DOMContentLoaded", function(){
 const BIGRDsvg = document.querySelector(".big-road-svg");
const BIGRDsvgns = "http://www.w3.org/2000/svg";

const BIGRDwidth = 50;
const BIGRDheight = 50;
const BIGRDcolumns = 60;
const BIGRDrows = 6;
const BIGRDfakePadding = 10; // this will be the overall padding and the space between rectangles
const BIGRDcolorArray = ["#FFFFFF"];
let BIGRDcounter = 0;
let BIGRDcol = 1;
let BIGRDrow = 1;
let BIGRDcell = {
	number: BIGRDcounter,
	column: BIGRDcol,
	row: BIGRDrow
};
let BIGRDcells = [];

let BIGRDcellnumber = `${BIGRDcounter}`;
let BIGRDcellrow = `${BIGRDrow}`;
let BIGRDcellcolumn = `${BIGRDcol}`;
const BIGRDsvgWidth =
	BIGRDwidth * BIGRDcolumns + (BIGRDcolumns + 1) * BIGRDfakePadding;
const BIGRDsvgHeight =
	BIGRDheight * BIGRDrows + (BIGRDrows + 1) * BIGRDfakePadding;

gsap.set(BIGRDsvg, {
	attr: {
		"data-cell-number": BIGRDcellnumber,
		"data-cell-column": BIGRDcellcolumn,
		"data-cell-row": BIGRDcellrow,
		width: BIGRDsvgWidth,
		height: BIGRDsvgHeight,
		viewBox: "0 0 " + BIGRDsvgWidth + " " + BIGRDsvgHeight
	}
});
for (let k = 0; k < BIGRDcolumns; k++) {
	for (let m = 0; m < BIGRDrows; m++) {
		BIGRDcounter++;
		let BIGRDcellnumber = `${BIGRDcounter}`;
		let BIGRDcellrow = `${m + 1}`;
		let BIGRDcellcolumn = `${k + 1}`;
		let BIGRDnewRect = document.createElementNS(BIGRDsvgns, "rect");
		let BIGRDnewX = (BIGRDwidth + BIGRDfakePadding) * k + BIGRDfakePadding;
		let BIGRDnewY = (BIGRDheight + BIGRDfakePadding) * m + BIGRDfakePadding;
		gsap.set(BIGRDnewRect, {
			attr: {
				"data-cell-number": BIGRDcellnumber,
				"data-cell-column": BIGRDcellcolumn,
				"data-cell-row": BIGRDcellrow
			},
			x: BIGRDnewX,
			y: BIGRDnewY,
			width: BIGRDwidth,
			height: BIGRDheight,
			fill: BIGRDcolorArray[BIGRDcounter % BIGRDcolorArray.length]
		});

		BIGRDnewRect.addEventListener("click", function (e) {
			console.log("click event on:");
			console.log("cell number = " + e.originalTarget.dataset.BIGRDcellNumer);
			console.log("column = " + e.originalTarget.dataset.BIGRDcellColumn);
			console.log("row = " + e.originalTarget.dataset.BIGRDcellRow);
		});

		BIGRDsvg.appendChild(BIGRDnewRect);
		let BIGRDtxt = document.createElementNS(BIGRDsvgns, "text");
		BIGRDtxt.textContent = BIGRDcounter;
		BIGRDsvg.appendChild(BIGRDtxt);
		gsap.set(BIGRDtxt, {
			attr: {
				x: BIGRDnewX + BIGRDwidth / 2,
				y: BIGRDnewY + BIGRDheight / 2
			}
		});
	}
}
});
</script>